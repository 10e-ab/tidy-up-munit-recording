#!/usr/bin/env ruby

require 'rexml/document'
include REXML
require "tty-prompt"
require 'rouge'
require 'fileutils'
require 'io/console'
require 'pathname'
require 'rexml/document'
require 'rexml/formatters/pretty'


MAX_CONTENT_LENGHT=500
XML_FORMATTER_LINE_LENGTH=120

$files_to_rename=[]
$files_to_delete=[]

def clear_screen
  if RUBY_PLATFORM =~ /win32|win64|\.NET|windows|cygwin|mingw32/i
    system('cls')
  else
    system('clear')
  end
end

def print_separator
  # Query the terminal's width
  terminal_width = IO.console.winsize[1]

  # If unable to determine terminal width, default to 80
  terminal_width = 80 if terminal_width.nil? || terminal_width <= 0

  puts '-' * terminal_width
end

def truncate_string(str, max_length)
  if str.length > max_length
    "#{str[0...max_length-3]}..."
  else
    str
  end
end

def prompt_yes_or_no(question)
  valid_input = false
  input = nil

  until valid_input
    puts question
    input = STDIN.gets.chomp.upcase
    valid_input = ['Y', 'N'].include?(input)
    puts "Invalid input. Please enter Y or N." unless valid_input
  end

  input
end

def prompt_for_action(question,valid_responses)
  valid_input = false
  input = nil

  until valid_input
    puts question
    input = STDIN.gets.chomp.upcase
    valid_input = valid_responses.include?(input)
    puts "Invalid input" unless valid_input
  end

  input
end

def highlight_xml(xml_content)
  lexer = Rouge::Lexers::XML.new
  formatter = Rouge::Formatters::Terminal256.new
  highlighted_xml = formatter.format(lexer.lex(xml_content.to_s))
end

def highlight_dwl(dwl_content)
  lexer = Rouge::Lexers::JSON.new
  formatter = Rouge::Formatters::Terminal256.new
  highlighted_dwl = formatter.format(lexer.lex(dwl_content.to_s))
end

def highlight(content)
  lexer = Rouge::Lexers::Shell.new
  formatter = Rouge::Formatters::Terminal256.new
  highlighted = formatter.format(lexer.lex(content.to_s))
end

def downcase_first_letter(str)
  str[0].to_s.downcase + str[1..-1].to_s
end


def suggest_filename(element,last_doc_name)
  last_doc_name_as_path=downcase_first_letter(last_doc_name.gsub(/\s+/, "-"))
  case element.name
  when "variable"
    key = element.attributes['key']
    "#{last_doc_name_as_path}-#{key}.dwl"
  when "attributes"
    "#{last_doc_name_as_path}-attributes.dwl"
  when "payload"
    "#{last_doc_name_as_path}-payload.dwl"
  end
end

def file_and_folder(file_path)
  filename = File.basename(file_path)
  directory_path = File.dirname(file_path)
  last_folder_name = Pathname.new(directory_path).basename.to_s

  "#{last_folder_name}/#{filename}"
end

def edit_file(file_path)
  editor = ENV['EDITOR'] || (RUBY_PLATFORM =~ /win32|win64|windows/ ? 'notepad' : 'nano')
  system("#{editor} #{file_path}")
end

# This function will update all attributes for witch values contain &quot; or &#10; to use surrouding single qoutes
# And then replace all &quot; to " and &#10; to new lines
def normalize_attribute_quotes_and_decode_entities(xml_string)
  # This pattern attempts to match only the value attribute content that includes &quot; or &#10; (New line)
  pattern = /(\w+)="#(\[[^"]*?(?:&quot;|&#10;)[^"]*?\])"/
  
  # TODO test if the string contains &apos; ', if its does dont gsub

  xml_string.gsub(pattern) do
    key = $1
    value = $2
    # Decoding &quot; to " within the value and ensuring the new value is enclosed in single quotes
    "#{key}='#" + value.gsub('&quot;', '"').gsub('&#10;',"\n") + '\''
  end
end

def save_munit_file(path,document)
  formatter = REXML::Formatters::Pretty.new(2)
  # Use " not '
  document.context[:attribute_quote] = :quote 
  document.context[:prologue_quote] = :quote 

  formatter.width = XML_FORMATTER_LINE_LENGTH

  xml_string = ""
  formatter.write(document, xml_string)

  xml_string=normalize_attribute_quotes_and_decode_entities(xml_string)

  File.write(path, xml_string)

end


def tidy_readUrl(element,last_doc_name,mock_or_event,current_test,munit_directory_path)
  suggested_filename=suggest_filename(element,last_doc_name)
  value = element.attributes['value']

  if value =~ /(.*)readUrl\(['"]classpath:\/\/(.+?)['"]\)(.*)/
    expression_start=$1
    expression_end=$3
    dwl_file_path = "#{munit_directory_path}/../resources/#{$2}"
    begin 
      dwl_content = File.read(dwl_file_path)
    rescue 
      puts "Could not find file #{dwl_file_path}"
      puts "Press enter to continue"
      STDIN.gets
      return
    end

    # UI
    clear_screen()
    print_separator()
    puts "In #{highlight(current_test)} Type #{highlight(mock_or_event)} with doc:name \"#{highlight(last_doc_name)}\""
    puts ""
    puts highlight_xml(element)
    puts ""
    print_separator()
    puts "Content of referenced file:"
    puts ""
    puts highlight_dwl(truncate_string(dwl_content,MAX_CONTENT_LENGHT))
    puts ""
    print_separator()
    puts "Suggested filename: #{highlight(suggested_filename)}"
    action=prompt_for_action("Action: 'I' (Inline), 'D' (Delete), 'R' (Rename), 'E' (Edit), Leave empty to skip. Confirm with Enter.",["I","D","R","E",""])

    case action
    when 'I'
      # Inline content
      case element.name
      when "payload"
        element.attributes['value'] = "#{expression_start}#{dwl_content}#{expression_end}"
      else
        #It looks like we dont need the "%dw 2.0 output... for attributes and variables. But this could potentially cause issues...
        element.attributes['value'] = "#[#{dwl_content}]"
      end
      $files_to_delete << dwl_file_path
      changes_made = true
    when 'R'
      # Rename file reference
      prompt = TTY::Prompt.new
      new_filename = prompt.ask('Enter the new file name', value: suggested_filename)
      # TODO What should we do if the file already exists? Do we need to do anything?

      dwl_directory_path = File.dirname(dwl_file_path)
      dwl_folder_name = File.basename(dwl_directory_path)
      element.attributes['value'] = "#{expression_start}readUrl(\"classpath://#{dwl_folder_name}/#{new_filename}\")#{expression_end}"

      $files_to_rename << [dwl_file_path,"#{munit_directory_path}/../resources/#{dwl_folder_name}/#{new_filename}"]
      changes_made = true
    when 'D'
      # Delete the element
      element.parent.delete_element(element)
      $files_to_delete << dwl_file_path
      changes_made = true
    when 'E'
      edit_file(dwl_file_path)
      changes_made=tidy_readUrl(element,last_doc_name,mock_or_event,current_test,munit_directory_path)
    end
  end
  return changes_made
end

def tidy_assert(element,last_doc_name,current_test,munit_directory_path)

  # Extract the DWL file path from the CDATA content
  if element.to_s =~ /import\s+([^\s:]+)::([^\s]+)/
    # Construct the file path
    module_name = $1
    file_name = $2
    dwl_file_path = "#{munit_directory_path}/../resources/#{module_name}/#{file_name}.dwl"
    begin
      dwl_content = File.read(dwl_file_path)
    rescue => e
      puts "Could not find file #{dwl_file_path}"
      puts "Press enter for next"
      STDIN.gets
      return
    end

    # UI
    clear_screen()
    print_separator()
    puts "In #{highlight(current_test)} Type #{highlight('assert')} with doc:name \"#{highlight(last_doc_name)}\""
    puts ""
    puts highlight_xml(element)
    puts ""
    print_separator()
    puts "Content of imported file:"
    puts ""
    puts highlight_dwl(truncate_string(dwl_content,MAX_CONTENT_LENGHT))
    puts ""
    print_separator()
    action=prompt_for_action("Action: 'I' (Inline), 'E' (Edit), Leave empty to skip. Confirm with Enter.",["I","E",""])

    case action
    when 'I'
      # Clear existing CDATA or text
      element.children.each { |child| element.delete(child) }
      element.add(REXML::CData.new("#[#{dwl_content}]"))
      $files_to_delete << dwl_file_path
      changes_made = true
    when 'E'
      edit_file(dwl_file_path)
      changes_made=tidy_assert(element,last_doc_name,current_test,munit_directory_path)
    end
  end
  return changes_made
end

def tidy_up(munit_file_path,test_name)
  puts test_name
  absolute_path = File.expand_path(munit_file_path)
  xml_doc = Document.new(File.new(absolute_path))
  munit_directory_path = File.dirname(absolute_path)
  changes_made=false

  # This is used to suggest a file name
  last_doc_name=""
  # This is used to provide context for the user
  mock_or_event=""
  current_test=""
  xml_doc.elements.each('//*') do |element|
    if element.name == "test"
      current_test = element.attributes["name"]
    elsif element.name == "mock-when"
      last_doc_name = element.attributes["doc:name"]
      mock_or_event="mock"

    elsif element.name == "set-event"
      last_doc_name = element.attributes["doc:name"]
      mock_or_event="set-event"
    elsif element.name == "that"
      next if !test_name.nil? && current_test!=test_name
      changed=tidy_assert(element,last_doc_name,current_test,munit_directory_path)
      changes_made||=changed
    else
      next if !test_name.nil? && current_test!=test_name
      changed=tidy_readUrl(element,last_doc_name,mock_or_event,current_test,munit_directory_path)
      changes_made||=changed
    end
  end

  if changes_made
    clear_screen()
    print_separator()

    if prompt_yes_or_no("Apply changes: (Y/N)")  == 'Y'
      if prompt_yes_or_no("Create backup of munit file: (Y/N)")  == 'Y'
        FileUtils.cp(munit_file_path, "#{munit_file_path}.bak")
        puts "Backup #{highlight(File.basename(munit_file_path)+'.bak')} created"
      end
      save_munit_file(munit_file_path, xml_doc)
      puts "Saved #{highlight(File.basename(munit_file_path))}"

      if $files_to_delete.length > 0
        print_separator()
        puts "Files to delete:"
        $files_to_delete.each {|f| puts "#{highlight(file_and_folder(f))}"}
        if prompt_yes_or_no("Delete the files: (Y/N)")  == 'Y'
          $files_to_delete.each do |file| 
            FileUtils.rm(file)
          end
          puts "Deleted files"
        end
      end

      if $files_to_rename.length > 0
        print_separator()
        puts "Files to rename:"
        $files_to_rename.each {|f,t| puts "#{highlight(file_and_folder(f))} to #{highlight(file_and_folder(t))}"}
        if prompt_yes_or_no("Rename the files: (Y/N)")  == 'Y'
          $files_to_rename.each do |from,to| 
            if from==to
              puts "Same file, nothing to rename"
            else
              FileUtils.mv(from, to)
            end
          end
          puts "Renamed files"
        end
      end
    end
  else
    puts "No changes"
  end
end

if __FILE__ == $PROGRAM_NAME
  if ARGV.length < 1
    puts "Usage: ruby #{__FILE__} path/to/munit_file.xml [test name]"
    exit 1
  end

  file_path = ARGV[0]
  test_name = ARGV[1]
  ARGV.clear
  tidy_up(file_path,test_name)
end
